[20220828]
#Push Constant
    - Small constant data that can be transfered to shader via commandBuffers rather than "writes to memory || copyCommands"  
    - BUT only 128 bytes of memory guarantee to be used for push constant 
        => "logicalDevice.properties.limits.maxPushConstantSize" shows max memory for user device
    - Memory limit for "Push Constant" is universal across shaders => single 128 byte for every shader
        => so you can do stuff like "64byte for vertex" & "64byte for fragment" shader
    - "Push Constant" contains...
        =>  StageFlags : which shader can use this PushConstant
            offset  : (must be multiple of 4) offset of where PushConstant starts
            Size :  size of PushConstant

            ex) This is for explaination sake -> its much easier to hold everything in 1 struct
                struct PushConst_Vert{
                    stage = Vertex;
                    offset = 0;
                    size = 64;
                }
                struct PushConst_Frag{
                    stage = Fragment;
                    offset = 64;
                    size = 64;
                }
    -   Use "layout(push_constant) uniform [Name]{ ... }[name];" inside shader to use the given push constant
        Name is not an issue BUT u should match the memory Layout same as the input PushConstant(no shit sherlock)
    -   PushConstant and Uniform with some other dataType follows Memory Alignment Rules specified for SPIR-Vertex
        For Example...
            struct SimplePushConstantData{
                glm::vec2 offset;   //  for position offset
                glm::vec3 color;    //  for color
            };
        ->  this struct currently has 4,4,4,4,4 byte layout packed(1st2nd for offset, rest for color)
            BUT bc of Aligment Rules, any (3,4) vector should follow 4times its component memory size
                                        (2) vector should follow 2*its component memory size
            +   structure should layout as [largest memory size of member variable * number of memory variable]

            So in this case, offset has to be 8byte(2*4byte) & color has to be 16 bytes(4byte * 4) 
                                +   its struct => largest(16byte) * 2(member variable) = 16*16 size layout
            => 4,4,-,-,4,4,4,-  is what shader reads from its pushConstant

            2offset value goes right in. HOWEVER the RG value will go to that padding space and B value will
            go to the fisrt "4" byte space, which represents Red. => x,y,[r],[g], b,-,- ([]gets ignored)
            so if you tried to set color to ur liking, it is going to fuck up the presentation
        To avoid this, with C++11 feature "alignas(x)", you can add padding byte for member variable layout
            struct SimplePushConstantData{
                glm::vec2 offset;
                alignas(16) glm::vec3 color; -> this adds two 4bytes befor color to fill up 4*4byte for offset    
            };
        "alignas(x)" has some rules, 
            X should be larger than 1   /   X should be multiple of 2 (2, 4, 8, 16, ...)
    ##  Conclusion
        -pro:   GOOD for small fraquently updated data + easy to implement
        -cons:  limitation in size + is tied to drawCall => when packing several models in 1 vertexBuffer to draw them with 1 draw called
                                                            push constant cant interact differently for each model, but only same pushConstant 
                                                            for every vertex data
        Most used in storing Transformation



[20220829]
    EntitySystem -> data oriented system to structure gameObjects
    glm::mat =>                                                                                             X     O
        GLM reads in coloum not in row. => so it read "scale.x & 0.0f inside second{}" as 1st input     1| 123   14
        ex> [1st row] 1 2 3 [2nd row] 4 5 6 => is not 3X2 mat, its 2X3 mat                              2| 456   25
        so if you want to add z axis then you should add 1 value to each row, not adding new {}         3|       36


[20220831]
    Rendering System -> Current [App] has too much functionality inside itself
    we will pop off those functionality and make a "Renderer" which will be responsible for ALL Rendering operation
        For Renderer -> 
            drawFrame, swapChain Creation, CommandBuffer Creation
        is needed so it can focus on "Drawing thing on surface"

        For "Simple Render System" ->
            pipeline, pipelineLayout, pushConstant, renderGameObject
        is needed so it configures what is going to happen and get drawn when passed through to [Renderer]

    Typically only 1 Renderer exists and many RenderSystem uses that renderer to render out what they returned
        [Renderer]
            What we did was with [Renderer] => we divided "drawFrame" into 2 parts
            From start of "drawFrame" ~ just the beginning of "recordCommandBuffer" AS [beginFrame]
            From the ending bit of "recordCommandBuffer"(for ending commandBuffer) ~ rest of "drawFrame" AS [endFrame]

            Same goes to "recordCommandBuffer" => divided to 2parts
            ->  from start all the way to "recordGameObject" as [beginSwapChainRenderPass]
            ->  "vkCmdEndRenderPass" as [endSwapChainRenderPass]

            so inside application.cpp -> you can 
                1. "if(commandBuffer = beginFrame())" to return the commandBuffer AND checking if recreating swapChain is needed at the same time
                2.  "beginSwapChainRenderPass()" + [ANY RENDER SYSTEM TO RECORD ITS OPERATION] + "endSwapChainRenderPass"
                3.  "endFrame()"
            in the future we can do post-processing or any other pipeline operation for any sub-rendering system just by swaping the [...] part

        [SimpleRenderSystem]
            We will not save renderPass as member variable bc we will only use renderPass for pipeline creation and our renderSystem's lifeCycle is not
            tied to renderPass(TLDR: we dont need em once pipeline is made)
        
                when creating fetch renderPass from Renderer and during loop call "renderGameObjects" to render(record gameObject to commandBuffer)
        
        We refactored the SwapChain class to check its format with given swapChain. We pass in previous swapChain and see if recreated swapChain 
        has the same image&depth Format ->  if yes that means recreated swapChain is compatible
                                        ->  if no that means its not compatible and you would have to recreate pipeline(which depends on swapChain's renderPass)


        We also refactor so that we no longer create 1-1 relationship with commandBuffer & FrameBuffer
        MAX_FRAMES_IN_FLIGHT determines how many FrameBuffer runs during submittingBuffers
        currently its 2 -> 1 for acquiring AND 1 for rendering(drawing inside image). When 1 FrameBuffer is done rendering it is send 
        so it can be presented. Then the other 1 framebuffer will start rendering following with new framebuffer acquiring imageIndex
        so constantly 2 framebuffer works while 1 framebuffer is presented and returns back to swapChain(is its tripleBuffering)

        You can figure out that its a dumb move to creat additional commandBuffer for that 1 frameBuffer that is getting returned  to swapChain
        which does nothing until its turn to acquire imageIndex -> only 2 FrameBuffer is needed per frame == WE ONLY NEED 2 COMMANDBUFFER PRE FrameBuffer

        So when creating CommandBuffer we resize our commandBuffer storing vector to MAX_FRAMES_IN_FLIGHT. 
        "GetCurrentCommandBuffer()" will return myCommandBuffer[currentFrameBuffer] not currentImageIndex
        Recording commandBuffers dont need much change bc we already record them per "Frame"
        TLDR would be we only make 2 slots for CommandBuffer and we use them 1 after another loop through those slots and recording commandBuffers
        every frame. 

[20220901]

    Transformation => current way of doing is not flexible for complicated Transformation
    We move translation by adding offset as value after rotation*scale operation with matrix. To configure translation with matrix 
    the current matrix form cant be used. -> SO we use "Homogeneous coordinates"
    TLDR:   vector representing direction will have "0" added for last component, "1" is added for vector representing points
        ex. 
            v = (2, 3, 0) and u = (2, 3, 1) =>  v means it a direction 
                                                u means its a point
            ->  homogeneous represents infinity, (2,3,0) is for homogeneous representation written in cartisean coordinates
                the third component is "w" and its divided with other given component. if "w" is close to 0 == value that got divided with "w" will reach infinity
                representing (x,y) = (2, 3) to (x, y, w) = (2, 3, 0) means that this homogeneous coordinate represents EVERY possible representation of (2, 3)
            ->  (2, 3, 1) means (2/1, 3/1) which is just a point (2, 3) for xy-plane
    
    Rotation can be represented with "Euler Angle", "Quaternion", "Axis" -> we currently use 1 case of "Trait-Bryan Euler Angle" to represent rotation matrix
        ->  note that Euler Angle has "Gimble Lock" which can mess up the rotation
            ( THis is when Quaternion is used -> same approach with homogeneous coordinate we use 1 upper dimension representation to represent rotation)

    Rotation can be interpreted as "Extrinsic" || "Intrinsic" -> any rotation matrix operation can be understood by both of this idea

        ex. Rotation Matrix Xr*Yr*Zr
            [follow from right->left] : Extrinsic
                object rotates around fixed axis
            [follow from left->right] : Intrinsic
                object's axis rotates  

[20220903]
    Orthographic matrix will set a space where things get drawned and transform it to clipSpace to show on screen
    VULKAN clip Space is leftHand system, "Z" going + towards the screen & "Y" goes positive going down

    for specific calculation look up video

    NOTE 
        when aspect ratio is smaller than 1 (screen Height > Width), screen drawn get clipped
        to avoid this, For Orthographic Matrix, call param with (-1, 1, -1/aspect, 1/aspect, -1, 1)
        For PerspectiveMatrix, go for    
            *function to consider have an orthographic view volume of at least [left=-1, right=1, top=-1, bottom=1, near=-1, far=1]
            ...
            auto aspect_nominator = aspect;
            auto aspect_denominator = 1.0f;
            if (aspect < 1.0f) {
                aspect_nominator = 1.0f;
                aspect_denominator = 1 / aspect;
            }
            ...
            projectionMatrix[0][0] = 1.f / (aspect_nominator * tanHalfFovy);
            projectionMatrix[1][1] = 1.f / (aspect_denominator * tanHalfFovy);
            ...
        